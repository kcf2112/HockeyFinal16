//
//  Bracket.swift
//  HockeyFinal16
//
//  Created by Kevin Filer on 4/10/25.
//
// The structs were generated by the 'Ducky' app, which infers data types from JSON.
// However, I had to manually add initial/default values in order to generate an
// "empty" bracket via default initializer.
//
// See https://github.com/Zmalski/NHL-API-Reference for NHL API docs.
//
// Data notes:
// - NHL 'bracket' json response provides data (see playoffs2024.json example file.)
//   -- Example: https://api-web.nhle.com/v1/playoff-bracket/2024
//   -- The json data does not contain details about the individual games within the series
//      --- Possible option: "game-story", e.g., https://api-web.nhle.com/v1/wsc/game-story/2023020204
//
// - Complete playoff bracket: 15 series, seriesLetter values "A" through "O"
//   -- All series seem to be reliably sorted
//
// - "playoffRound":1
//   -- Eastern Conf: A-D seriesLetter
//   -- Western Conf: E-H seriesLetter
//   -- Note: conferences are not identified at this level
//   -- Note: also have "seriesTitle" and "seriesAbbrev" fields; not useful at this level
//      --- Seem to be alternate playoffRound identifiers
//      --- See later playoff rounds
//
// - "playoffRound":2
//   -- Eastern Conf: I, J seriesLetter
//   -- Western Conf: K, L seriesLetter
//   -- Still no conference idents
//
// - "playoffRound":3
//   -- Eastern Conf: M seriesLetter
//      --- "seriesAbbrev":"ECF",
//      --- "seriesTitle" "Eastern Conference Finals"
//   -- Western Conf: N seriesLetter
//      --- "seriesAbbrev":"WCF",
//      --- "seriesTitle" "Western Conference Finals"
//
// - "playoffRound":4
//   -- "seriesAbbrev":"SCF"
//   -- "seriesLetter":"O"
//   -- "seriesTitle":"Stanley Cup Final"
//      --- Note different pluralization of 'Final' (vs 'Finals')
//

import Foundation

// The top level data structure that carries a full NHL playoff bracket
// report for a given year.
//
struct Bracket: Codable {
    struct Series: Codable {
        struct TopSeedTeam: Codable {
            struct Name: Codable {
                var `default`: String = ""
                var fr: String?
            }

            struct CommonName: Codable {
                var `default`: String = ""
            }

            struct PlaceNameWithPreposition: Codable {
                var `default`: String = ""
                var fr: String?
            }

            var id: Int = 0
            var abbrev: String = ""
            var name = Name()
            var commonName = CommonName()
            var placeNameWithPreposition = PlaceNameWithPreposition()
            var logo = URL(string: "")
            var darkLogo = URL(string: "")
        }

        struct BottomSeedTeam: Codable {
            struct Name: Codable {
                var `default`: String = ""
                var fr: String = ""
            }

            struct CommonName: Codable {
                var `default`: String = ""
            }

            struct PlaceNameWithPreposition: Codable {
                var `default`: String = ""
                var fr: String = ""
            }

            var id: Int = 0
            var abbrev: String = ""
            var name = Name()
            var commonName = CommonName()
            var placeNameWithPreposition = PlaceNameWithPreposition()
            var logo = URL(string: "")
            var darkLogo = URL(string: "")
        }

        var seriesTitle: String = ""
        var seriesAbbrev: String = ""
        var seriesLetter: String = ""
        var seriesURL: String?
        var playoffRound: Int = 0
        var topSeedRank: Int = 0
        var topSeedRankAbbrev: String?
        var topSeedWins: Int = 0
        var bottomSeedRank: Int = 0
        var bottomSeedRankAbbrev: String?
        var bottomSeedWins: Int = 0
        var winningTeamID: Int?
        var losingTeamID: Int?
        var topSeedTeam: TopSeedTeam?
        var bottomSeedTeam: BottomSeedTeam?
        var seriesLogo: URL?
        var seriesLogoFr: URL?
        var conferenceAbbrev: String?
        var conferenceName: String?

        private enum CodingKeys: String, CodingKey {
            case seriesURL = "seriesUrl"
            case seriesTitle
            case seriesAbbrev
            case seriesLetter
            case playoffRound
            case topSeedRank
            case topSeedRankAbbrev
            case topSeedWins
            case bottomSeedRank
            case bottomSeedRankAbbrev
            case bottomSeedWins
            case winningTeamID = "winningTeamId"
            case losingTeamID = "losingTeamId"
            case topSeedTeam
            case bottomSeedTeam
            case seriesLogo
            case seriesLogoFr
            case conferenceAbbrev
            case conferenceName
        }
    }

    var bracketLogo = URL(string: "")
    var bracketLogoFr = URL(string: "")
    var series: [Series] = []
    
    init() {
        self.series = Array(repeating: Bracket.Series(), count: 15)
    }
}
