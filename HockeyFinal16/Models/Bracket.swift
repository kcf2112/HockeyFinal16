//
//  Bracket.swift
//  HockeyFinal16
//
//  Created by Kevin Filer on 4/10/25.
//
// The structs were generated by the 'Ducky' app, which infers data types from JSON.
//
// Data notes: NHL bracket json response provides date (see playoffs2024.json example file.)
//
// - Complete playoff bracket: 15 series, seriesLetter values "A" through "O"
//   -- All series seem to be reliably sorted
//
// - "playoffRound":1
//   -- Eastern Conf: A-D seriesLetter
//   -- Western Conf: E-H seriesLetter
//   -- Note: conferences are not identified at this level
//   -- Note: also have "seriesTitle" and "seriesAbbrev" fields; badly named
//      --- Seem to be alternate playoffRound identifiers
//
// - "playoffRound":2
//   -- Eastern Conf: I, J seriesLetter
//   -- Western Conf: K, L seriesLetter
//   -- Still no conference idents
//
// - "playoffRound":3
//   -- Eastern Conf: M seriesLetter
//      --- "seriesAbbrev":"ECF",
//      --- "seriesTitle" "Eastern Conference Finals"
//   -- Western Conf: N seriesLetter
//      --- "seriesAbbrev":"WCF",
//      --- "seriesTitle" "Western Conference Finals"
//
// - "playoffRound":4
//   -- "seriesAbbrev":"SCF"
//   -- "seriesLetter":"O"
//   -- "seriesTitle":"Stanley Cup Final"
//      --- Note different pluralization of 'Final' (vs 'Finals')
//

import Foundation

// The top level data structure that represents a full NHL playoff bracket
// for a given year.
struct Bracket: Codable {
  let bracketLogo: URL
  let bracketLogoFr: URL
  let series: [Series]
}

struct Series: Codable {
  let seriesURL: String
  let seriesTitle: String
  let seriesAbbrev: String
  let seriesLetter: String
  let playoffRound: Int
  let topSeedRank: Int
  let topSeedRankAbbrev: String
  let topSeedWins: Int
  let bottomSeedRank: Int
  let bottomSeedRankAbbrev: String
  let bottomSeedWins: Int
  let winningTeamID: Int
  let losingTeamID: Int
  let topSeedTeam: TopSeedTeam
  let bottomSeedTeam: BottomSeedTeam
  let seriesLogo: URL?
  let seriesLogoFr: URL?
  let conferenceAbbrev: String?
  let conferenceName: String?

  private enum CodingKeys: String, CodingKey {
    case seriesURL = "seriesUrl"
    case seriesTitle
    case seriesAbbrev
    case seriesLetter
    case playoffRound
    case topSeedRank
    case topSeedRankAbbrev
    case topSeedWins
    case bottomSeedRank
    case bottomSeedRankAbbrev
    case bottomSeedWins
    case winningTeamID = "winningTeamId"
    case losingTeamID = "losingTeamId"
    case topSeedTeam
    case bottomSeedTeam
    case seriesLogo
    case seriesLogoFr
    case conferenceAbbrev
    case conferenceName
  }
}

struct TopSeedTeam: Codable {
  let id: Int
  let abbrev: String
  let name: Name
  let commonName: CommonName
  let placeNameWithPreposition: PlaceNameWithPreposition
  let logo: URL
  let darkLogo: URL
}

struct Name: Codable {
  let `default`: String
  let fr: String
}

struct CommonName: Codable {
  let `default`: String
}

struct PlaceNameWithPreposition: Codable {
  let `default`: String
  let fr: String
}

struct BottomSeedTeam: Codable {
  let id: Int
  let abbrev: String
  let name: Name
  let commonName: CommonName
  let placeNameWithPreposition: PlaceNameWithPreposition
  let logo: URL
  let darkLogo: URL
}
