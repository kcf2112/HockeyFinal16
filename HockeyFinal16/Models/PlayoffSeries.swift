//
//  Series.swift
//  HockeyFinal16
//
//  Created by Kevin Filer on 4/13/25.
//
// The structs were generated by the 'Ducky' app, which infers data types from JSON.
// However, I had to manually add initial/default values in order to generate an
// "empty" PlayoffSeries via default initializer.

import Foundation

// This data model represents the JSON data returned from the API call to
// https://api-web.nhle.com/v1/schedule/playoff-series/<season>/<seriesLetter>
// where season is like '20232024' and seriesLetter is like 'B' (case insensitive.)
//
// The JSON provides basic info about the games (teams, game location, scores, etc.)
// Use the provided game 'id' value to do other retrievals for more indepth
// game data.
//
// See https://github.com/Zmalski/NHL-API-Reference for NHL API docs.
//
import Foundation

struct PlayoffSeries: Codable {
    struct BottomSeedTeam: Codable {
        struct Name: Codable {
            var `default`: String = ""
        }

        struct PlaceName: Codable {
            var `default`: String = ""
            var fr: String?
        }

        struct PlaceNameWithPreposition: Codable {
            var `default`: String = ""
            var fr: String = ""
        }

        struct Conference: Codable {
            var name: String = ""
            var abbrev: String = ""
        }

        var id: Int = 0
        var name = Name()
        var abbrev: String = ""
        var placeName = PlaceName()
        var placeNameWithPreposition = PlaceNameWithPreposition()
        var conference = Conference()
        var record: String = ""
        var seriesWins: Int = 0
        var divisionAbbrev: String = ""
        var seed: Int = 0
        var logo = URL(string: "")
        var darkLogo = URL(string: "")
    }

    struct TopSeedTeam: Codable {
        struct Name: Codable {
            var `default`: String = ""
        }

        struct PlaceName: Codable {
            var `default`: String = ""
            var fr: String?
        }

        struct PlaceNameWithPreposition: Codable {
            var `default`: String = ""
            var fr: String = ""
        }

        struct Conference: Codable {
            var name: String = ""
            var abbrev: String = ""
        }

        var id: Int = 0
        var name = Name()
        var abbrev: String = ""
        var placeName = PlaceName()
        var placeNameWithPreposition = PlaceNameWithPreposition()
        var conference = Conference()
        var record: String = ""
        var seriesWins: Int = 0
        var divisionAbbrev: String = ""
        var seed: Int = 0
        var logo = URL(string: "")
        var darkLogo = URL(string: "")
    }

    struct Game: Codable, Identifiable {
        struct Venue: Codable {
            var `default`: String = ""
        }

        struct TvBroadcast: Codable {
            var id: Int = 0
            var market: String = ""
            var countryCode: String = ""
            var network: String = ""
            var sequenceNumber: Int = 0
        }

        struct AwayTeam: Codable {
            struct CommonName: Codable {
                var `default`: String = ""
            }

            struct PlaceName: Codable {
                var `default`: String = ""
                var fr: String?
            }

            struct PlaceNameWithPreposition: Codable {
                var `default`: String = ""
                var fr: String = ""
            }

            var id: Int = 0
            var commonName = CommonName()
            var placeName = PlaceName()
            var placeNameWithPreposition = PlaceNameWithPreposition()
            var abbrev: String = ""
            var score: Int = 0
        }

        struct HomeTeam: Codable {
            struct CommonName: Codable {
                var `default`: String = ""
            }

            struct PlaceName: Codable {
                var `default`: String = ""
                var fr: String?
            }

            struct PlaceNameWithPreposition: Codable {
                var `default`: String = ""
                var fr: String = ""
            }

            var id: Int = 0
            var commonName = CommonName()
            var placeName = PlaceName()
            var placeNameWithPreposition = PlaceNameWithPreposition()
            var abbrev: String = ""
            var score: Int = 0
        }

        struct PeriodDescriptor: Codable {
            var number: Int = 0
            var periodType: String = ""
            var maxRegulationPeriods: Int = 0
        }

        struct SeriesStatus: Codable {
            var topSeedWins: Int = 0
            var bottomSeedWins: Int = 0
        }

        struct GameOutcome: Codable {
            var lastPeriodType: String = ""
            var otPeriods: Int?
        }

        var id: Int = 0
        var season: Int = 0
        var gameType: Int = 0
        var gameNumber: Int = 0
        var ifNecessary: Bool
        var venue = Venue()
        var neutralSite: Bool
        var startTimeUTC: String = ""
        var easternUTCOffset: String = ""
        var venueUTCOffset: String = ""
        var venueTimezone: String = ""
        var gameState: String = ""
        var gameScheduleState: String = ""
        // var tvBroadcasts: [TvBroadcast] = []
        var awayTeam = AwayTeam()
        var homeTeam = HomeTeam()
        var gameCenterLink: String = ""
        var periodDescriptor = PeriodDescriptor()
        var seriesStatus = SeriesStatus()
        var gameOutcome = GameOutcome()
    }

    var round: Int = 0
    var roundAbbrev: String = ""
    var roundLabel: String = ""
    var seriesLetter: String = ""
    var seriesLogo = URL(string: "")
    var seriesLogoFr = URL(string: "")
    var neededToWin: Int = 0
    var length: Int = 0
    var bottomSeedTeam = BottomSeedTeam()
    var topSeedTeam = TopSeedTeam()
    var games: [Game] = []

    private enum CodingKeys: String, CodingKey {
        case round
        case roundAbbrev
        case roundLabel
        case seriesLetter
        case seriesLogo
        case seriesLogoFr
        case neededToWin
        case length
        case bottomSeedTeam
        case topSeedTeam
        case games
        // case fullCoverageURL = "fullCoverageUrl"
    }
}
